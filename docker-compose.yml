networks:
  app-network:
    driver: bridge

# Environment variables from .env file
# Set HEROKU_API_TOKEN in .env to enable Heroku monitoring

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "8080:8080"
      - "8090:8090"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
      - ai-service
      - prometheus
      - alertmanager
      - cadvisor
      - grafana
    restart: unless-stopped

  # AI Service container
  ai-service:
    build: ./ai-service
    expose:
      - "3002"
    env_file:
      - ai-service/.env
    environment:
      - NODE_OPTIONS=--max_old_space_size=2048
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    volumes:
      - ./ai-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # Frontend container
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - NODE_ENV=development
      - NODE_OPTIONS=--max_old_space_size=1024
      - NEXT_PUBLIC_BACKEND_URL=http://localhost
      - NEXT_PUBLIC_API_URL=http://localhost
    deploy:
      resources:
        limits:
          memory: 1G  
        reservations:
          memory: 512M  
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules 
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped  

  # Backend API container
  backend:
    build: ./backend
    expose:
      - "3000"
    env_file:
      - backend/.env
    environment:
      - NODE_OPTIONS=--max_old_space_size=1024
      - BEHIND_PROXY=true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    depends_on:
      - ai-service
      - mongo
    restart: unless-stopped

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/configs/prometheus/development.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/configs/prometheus/rules/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - ./monitoring/configs/prometheus/rules/recording_rules.yml:/etc/prometheus/recording_rules.yml
      - ./monitoring/configs/prometheus/rules/advanced-alert-rules.yml:/etc/prometheus/advanced-alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:8080/prometheus/'
      - '--web.route-prefix=/'
      - '--alertmanager.notification-queue-capacity=10000'
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - alertmanager

  # Alertmanager service
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/configs/alertmanager/development.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:8080/alertmanager/'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - app-network
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
   image: grafana/grafana:latest
   container_name: grafana
   ports:
     - "3003:3000"
   environment:
     - GF_SECURITY_ADMIN_PASSWORD=brainbytes123
     - GF_USERS_ALLOW_SIGN_UP=false
     - GF_INSTALL_PLUGINS=grafana-clock-panel
     - GF_SERVER_ROOT_URL=http://localhost:8080/grafana/
     - GF_SERVER_SERVE_FROM_SUB_PATH=true
   volumes:
     - grafana_data:/var/lib/grafana
     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
   networks:
     - app-network
   restart: unless-stopped
   depends_on:
     - prometheus

  # Heroku Exporter (optional - only when HEROKU_API_TOKEN is set)
  heroku-exporter:
    image: heroku/heroku-exporter:latest
    container_name: heroku-exporter
    ports:
      - "9595:9595"
    environment:
      - HEROKU_API_TOKEN=${HEROKU_API_TOKEN}
    command: ["--heroku.api-token", "${HEROKU_API_TOKEN}"]
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - heroku  # Only start when using 'heroku' profile

  # MongoDB for local development
  mongo:
    image: mongo:7
    container_name: mongo-local
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=brainbytes
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session storage and caching (for monitoring consistency)
  redis:
    image: redis:7-alpine
    container_name: redis-local
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes for persistent data
volumes:
 prometheus_data:
 alertmanager_data:
 grafana_data:
 redis_data:
 mongo_data:
