version: '3.8'

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge

services:
  # Nginx reverse proxy for staging
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy-staging
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
      - ai-service
      - prometheus
      - alertmanager
    restart: unless-stopped
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx

  # AI Service container
  ai-service:
    build: 
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: brainbytes-ai-service-staging
    expose:
      - "3002"
    env_file:
      - ai-service/.env.staging
    environment:
      - NODE_ENV=staging
      - NODE_OPTIONS=--max_old_space_size=2048
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 2G
          cpus: '1.0'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend container
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: brainbytes-frontend-staging
    expose:
      - "3000"
    environment:
      - NODE_ENV=staging
      - NODE_OPTIONS=--max_old_space_size=1536
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API container
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: brainbytes-backend-staging
    expose:
      - "3000"
    env_file:
      - backend/.env.staging
    environment:
      - NODE_ENV=staging
      - NODE_OPTIONS=--max_old_space_size=1536
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - app-network
    depends_on:
      - ai-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-staging
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - ./monitoring/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.notification-queue-capacity=10000'
      - '--alertmanager.timeout=10s'
    networks:
      - app-network
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - alertmanager

  # Alertmanager service
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager-staging
    expose:
      - "9093"
    volumes:
      - ./monitoring/alertmanager.staging.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_staging_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://yourdomain.com/alertmanager'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - monitoring-network
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-staging
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.listen-address=0.0.0.0:9100'
    networks:
      - monitoring-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-staging
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring-network
    restart: unless-stopped

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: redis-staging
    expose:
      - "6379"
    volumes:
      - redis_staging_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: loki-staging
    expose:
      - "3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_staging_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    restart: unless-stopped

  # Log collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: promtail-staging
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - loki

# Volumes for persistent data
volumes:
  prometheus_staging_data:
    driver: local
  alertmanager_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  loki_staging_data:
    driver: local