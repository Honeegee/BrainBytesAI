networks:
  app-network:
    driver: bridge

services:
  # AI Service container
  ai-service:
    image: ghcr.io/honeegee/brainbytesai/ai-service:latest
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max_old_space_size=4096
      - API_KEY=${PRODUCTION_AI_API_KEY}
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend container
  frontend:
    image: ghcr.io/honeegee/brainbytesai/frontend:latest
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max_old_space_size=2048
      - NEXT_PUBLIC_API_URL=https://api.brainbytes.app
      - NEXT_PUBLIC_FRONTEND_URL=https://brainbytes.app
    deploy:
      resources:
        limits:
          memory: 2G  
        reservations:
          memory: 1G
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API container
  backend:
    image: ghcr.io/honeegee/brainbytesai/backend:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max_old_space_size=2048
      - DATABASE_URL=${PRODUCTION_DATABASE_URL}
      - JWT_SECRET=${PRODUCTION_JWT_SECRET}
      - SESSION_SECRET=${PRODUCTION_SESSION_SECRET}
    deploy:
      resources:
        limits:
          memory: 2G  
        reservations:
          memory: 1G
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    depends_on:
      - mongo
      - ai-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB container with replica set for production
  mongo:
    image: mongo:4.4
    command: mongod --replSet rs0 --bind_ip_all
    ports:
     - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=brainbytes_production
      - MONGO_INITDB_ROOT_USERNAME=${PRODUCTION_MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${PRODUCTION_MONGO_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 4G 
        reservations:
          memory: 2G
    volumes:
      - mongo-production-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${PRODUCTION_REDIS_PASSWORD}
    command: redis-server --requirepass ${PRODUCTION_REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - redis-production-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Define volumes for persistent data
volumes:
  mongo-production-data:
    driver: local
  mongo-config:
    driver: local
  redis-production-data:
    driver: local