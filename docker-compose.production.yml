networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge

services:
  # AI Service container
  ai-service:
    image: ghcr.io/honeegee/brainbytesai/ai-service:latest
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max_old_space_size=4096
      - API_KEY=${PRODUCTION_AI_API_KEY}
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend container
  frontend:
    image: ghcr.io/honeegee/brainbytesai/frontend:latest
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max_old_space_size=2048
      - NEXT_PUBLIC_API_URL=https://api.brainbytes.app
      - NEXT_PUBLIC_FRONTEND_URL=https://brainbytes.app
    deploy:
      resources:
        limits:
          memory: 2G  
        reservations:
          memory: 1G
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API container
  backend:
    image: ghcr.io/honeegee/brainbytesai/backend:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max_old_space_size=2048
      - DATABASE_URL=${PRODUCTION_DATABASE_URL}
      - JWT_SECRET=${PRODUCTION_JWT_SECRET}
      - SESSION_SECRET=${PRODUCTION_SESSION_SECRET}
    deploy:
      resources:
        limits:
          memory: 2G  
        reservations:
          memory: 1G
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - app-network
    depends_on:
      - ai-service
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${PRODUCTION_REDIS_PASSWORD}
    command: redis-server --requirepass ${PRODUCTION_REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - redis-production-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
      - prometheus
      - alertmanager
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus monitoring service
  prometheus:
   image: prom/prometheus:latest
   container_name: prometheus-production
   ports:
     - "9090:9090"
   volumes:
     - ./monitoring/configs/prometheus/production.yml:/etc/prometheus/prometheus.yml:ro
     - ./monitoring/configs/prometheus/rules/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
     - ./monitoring/configs/prometheus/rules/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
     - prometheus-production-data:/prometheus
   command:
     - '--config.file=/etc/prometheus/prometheus.yml'
     - '--storage.tsdb.path=/prometheus'
     - '--web.console.libraries=/etc/prometheus/console_libraries'
     - '--web.console.templates=/etc/prometheus/consoles'
     - '--storage.tsdb.retention.time=720h'
     - '--web.enable-lifecycle'
     - '--web.enable-admin-api'
     - '--alertmanager.notification-queue-capacity=10000'
     - '--alertmanager.timeout=10s'
   networks:
     - app-network
     - monitoring-network
   restart: unless-stopped
   depends_on:
     - alertmanager
   deploy:
     resources:
       limits:
         memory: 2G
       reservations:
         memory: 1G
   logging:
     driver: "json-file"
     options:
       max-size: "10m"
       max-file: "3"

 # Alertmanager service
  alertmanager:
   image: prom/alertmanager:latest
   container_name: alertmanager-production
   ports:
     - "9093:9093"
   volumes:
     - ./monitoring/configs/alertmanager/production.yml:/etc/alertmanager/alertmanager.yml:ro
     - alertmanager-production-data:/alertmanager
   command:
     - '--config.file=/etc/alertmanager/alertmanager.yml'
     - '--storage.path=/alertmanager'
     - '--web.external-url=https://monitoring.brainbytes.app/alertmanager'
     - '--cluster.listen-address=0.0.0.0:9094'
   networks:
     - monitoring-network
   restart: unless-stopped
   deploy:
     resources:
       limits:
         memory: 512M
       reservations:
         memory: 256M
   logging:
     driver: "json-file"
     options:
       max-size: "10m"
       max-file: "3"

 # Node Exporter for host metrics
  node-exporter:
   image: prom/node-exporter:latest
   container_name: node-exporter-production
   ports:
     - "9100:9100"
   volumes:
     - /proc:/host/proc:ro
     - /sys:/host/sys:ro
     - /:/rootfs:ro
   command:
     - '--path.procfs=/host/proc'
     - '--path.rootfs=/rootfs'
     - '--path.sysfs=/host/sys'
     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
     - '--web.listen-address=0.0.0.0:9100'
   networks:
     - monitoring-network
   restart: unless-stopped
   deploy:
     resources:
       limits:
         memory: 256M
       reservations:
         memory: 128M
   logging:
     driver: "json-file"
     options:
       max-size: "10m"
       max-file: "3"

 # cAdvisor for container metrics
  cadvisor:
   image: gcr.io/cadvisor/cadvisor:latest
   container_name: cadvisor-production
   ports:
     - "8080:8080"
   volumes:
     - /:/rootfs:ro
     - /var/run:/var/run:rw
     - /sys:/sys:ro
     - /var/lib/docker/:/var/lib/docker:ro
     - /dev/disk/:/dev/disk:ro
   privileged: true
   devices:
     - /dev/kmsg:/dev/kmsg
   networks:
     - monitoring-network
   restart: unless-stopped
   deploy:
     resources:
       limits:
         memory: 512M
       reservations:
         memory: 256M
   logging:
     driver: "json-file"
     options:
       max-size: "10m"
       max-file: "3"

# Grafana for visualization
grafana:
  image: grafana/grafana:latest
  container_name: grafana-production
  ports:
    - "3001:3000"
  environment:
    - GF_SECURITY_ADMIN_PASSWORD=brainbytes
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    - GF_SERVER_ROOT_URL=https://monitoring.brainbytes.app/grafana
  volumes:
    - grafana-production-data:/var/lib/grafana
    - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  networks:
    - monitoring-network
  restart: unless-stopped
  depends_on:
    - prometheus
  deploy:
    resources:
      limits:
        memory: 1G
      reservations:
        memory: 512M
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

# Define volumes for persistent data (MongoDB now uses Atlas)
volumes:
redis-production-data:
  driver: local
prometheus-production-data:
  driver: local
alertmanager-production-data:
  driver: local
grafana-production-data:
  driver: local