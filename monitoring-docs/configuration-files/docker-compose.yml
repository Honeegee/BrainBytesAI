networks:
  app-network:
    driver: bridge

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "8080:8080"
      - "8090:8090"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
      - ai-service
      - prometheus
      - alertmanager
      - cadvisor
    restart: unless-stopped

  # AI Service container
  ai-service:
    build: ./ai-service
    expose:
      - "3002"
    env_file:
      - ai-service/.env
    environment:
      - NODE_OPTIONS=--max_old_space_size=2048
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    volumes:
      - ./ai-service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # Frontend container
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - NODE_ENV=development
      - NODE_OPTIONS=--max_old_space_size=1024  
    deploy:
      resources:
        limits:
          memory: 1G  
        reservations:
          memory: 512M  
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules 
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped  

  # Backend API container
  backend:
    build: ./backend
    expose:
      - "3000"
    env_file:
      - backend/.env
    environment:
      - NODE_OPTIONS=--max_old_space_size=1024  
    deploy:
      resources:
        limits:
          memory: 1G  
        reservations:
          memory: 512M  
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    depends_on:
      - ai-service
    restart: unless-stopped

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--alertmanager.notification-queue-capacity=10000'
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - alertmanager

  # Alertmanager service
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - app-network
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network
    restart: unless-stopped

# Volumes for persistent data
volumes:
  prometheus_data:
  alertmanager_data:
