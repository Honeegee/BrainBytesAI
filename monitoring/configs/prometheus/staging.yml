global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: 'staging'
    cluster: 'brainbytes-staging'

rule_files:
  - "/etc/prometheus/alert-rules.yml"
  - "/etc/prometheus/recording_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Backend API metrics
  - job_name: 'brainbytes-backend'
    static_configs:
      - targets: ['backend:3000']
    metrics_path: '/metrics'
    scrape_interval: 15s

  # AI Service metrics
  - job_name: 'brainbytes-ai-service'
    static_configs:
      - targets: ['ai-service:3002']
    metrics_path: '/metrics'
    scrape_interval: 15s

  # Frontend metrics
  - job_name: 'brainbytes-frontend'
    static_configs:
      - targets: ['frontend:3000']
    metrics_path: '/metrics'
    scrape_interval: 15s

  # Node Exporter for host metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s

  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s

  # Alertmanager metrics
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 15s

# Remote write for long-term storage (optional)
# remote_write:
#   - url: "https://your-prometheus-remote-write-endpoint/api/v1/write"
#     basic_auth:
#       username: "your-username"
#       password: "your-password"

# Recording rules for performance optimization
recording_rules:
  - name: brainbytes.rules
    rules:
    # Request rate per service
    - record: brainbytes:request_rate_5m
      expr: rate(brainbytes_http_requests_total[5m])
    
    # Error rate per service
    - record: brainbytes:error_rate_5m
      expr: rate(brainbytes_http_requests_total{status=~"5.."}[5m]) / rate(brainbytes_http_requests_total[5m])
    
    # Average response time
    - record: brainbytes:response_time_avg_5m
      expr: rate(brainbytes_http_request_duration_seconds_sum[5m]) / rate(brainbytes_http_request_duration_seconds_count[5m])
    
    # AI service performance
    - record: brainbytes:ai_response_time_avg_5m
      expr: rate(brainbytes_ai_request_duration_seconds_sum[5m]) / rate(brainbytes_ai_request_duration_seconds_count[5m])
    
    # System resource utilization
    - record: instance:cpu_utilization
      expr: 100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)
    
    - record: instance:memory_utilization
      expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100
    
    - record: instance:disk_utilization
      expr: (1 - (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"})) * 100

# Storage configuration for staging
storage:
  tsdb:
    retention.time: 30d
    retention.size: 50GB
    wal-compression: true